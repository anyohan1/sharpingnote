<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace를 통해 StatisticsDAO와 연결 -->
<mapper namespace="com.sharp.ing.domain.StatisticsDAO">

<!-- 뽑아내는 값이 하나일때는 resultMap 대신 resultType을 써도 됨 -->
	<!-- resultType은 쿼리문에서 뽑아오는 최종 값의 타입을 써줌 -->
	<!-- resultMap은 return 값처럼 여러개를 반환할 수 없음 -->
	<select id="totalAvg" resultType="int">
	<![CDATA[  
select *
from
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date >= DATE_ADD(now(), interval -1 month)
			group by m.userId, m.family_count)a1
			)b1
		)c1
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -2 month) and DATE_ADD(now(), interval -1 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -3 month) and DATE_ADD(now(), interval -2 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -4 month) and DATE_ADD(now(), interval -3 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -5 month) and DATE_ADD(now(), interval -4 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -6 month) and DATE_ADD(now(), interval -5 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -7 month) and DATE_ADD(now(), interval -6 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -8 month) and DATE_ADD(now(), interval -7 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -9 month) and DATE_ADD(now(), interval -8 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -10 month) and DATE_ADD(now(), interval -9 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -11 month) and DATE_ADD(now(), interval -10 month)
			group by m.userId, m.family_count)a1
			)b1
		)
union all
(select (ifnull (total_avg, "0"))  as total_avg
from (select sum(a1.average)/count(distinct a1.u_id) as total_avg
		from(select m.userId as u_id, sum(i.price)/m.family_count as average
			from shopping_list s, item i, member m
			where s.list_id = i.list_id and s.userId = m.userId and purchase_date between DATE_ADD(now(), interval -12 month) and DATE_ADD(now(), interval -11 month)
			group by m.userId, m.family_count)a1
			)b1
		);
        
	
	]]>
	</select>

	<!-- 유저 소비 평균 값 -->
	<select id="userAvg" resultType="int">
	<![CDATA[  
select *
from
(select( ifnull (user_avg, "0"))  as user_avg
from (select sum(price)/max(m.family_count) as user_avg 
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date >= DATE_ADD(now(), interval -1 month))a1
    )b1
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -2 month) and DATE_ADD(now(), interval -1 month))a2
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -3 month) and DATE_ADD(now(), interval -2 month))a3
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -4 month) and DATE_ADD(now(), interval -3 month))a4
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -5 month) and DATE_ADD(now(), interval -4 month))a5
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -6 month) and DATE_ADD(now(), interval -5 month))a6
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -7 month) and DATE_ADD(now(), interval -6 month))a7
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -8 month) and DATE_ADD(now(), interval -7 month))a8
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -9 month) and DATE_ADD(now(), interval -8 month))a9
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -10 month) and DATE_ADD(now(), interval -9 month))a10
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -11 month) and DATE_ADD(now(), interval -10 month))a11
    )
union all
(select( ifnull (user_avg, "0")) as user_avg
from(select sum(price)/max(m.family_count) as user_avg
	from shopping_list s, item i, member m
	where s.userId=#{userId} and s.list_id = i.list_id and m.userId = s.userId and purchase_date between DATE_ADD(now(), interval -12 month) and DATE_ADD(now(), interval -11 month))a12
    );
	]]>
	</select>

	<resultMap id="CategoryAvg" type="com.sharp.ing.domain.CategoryAvgDTO">
	</resultMap>

	<select id="categoryAvg3" resultMap="CategoryAvg">
	<![CDATA[
	select l2.code02_vl, sum(i.price)/tot.total*100 as percentage
	from (select sum(i.price) as total
			from shopping_list s, item i, member m
			where s.userId=#{userId} and s.userId=m.userId and s.list_id=i.list_id and s.purchase_date >= DATE_ADD(now(), interval -3 month)) as tot, shopping_list s, item i, level2 l2, member m
	where s.userId=#{userId} and s.userId=m.userId and s.list_id=i.list_id and i.code02=l2.code02 and s.purchase_date >= DATE_ADD(now(), interval -3 month) 
	group by l2.code02_vl, tot.total;
	]]>
	</select>
	<select id="categoryAvg6" resultMap="CategoryAvg">
	<![CDATA[
	select l2.code02_vl, sum(i.price)/tot.total*100 as percentage
	from (select sum(i.price) as total
			from shopping_list s, item i, member m
			where s.userId=#{userId} and s.userId=m.userId and s.list_id=i.list_id and s.purchase_date >= DATE_ADD(now(), interval -6 month)) as tot, shopping_list s, item i, level2 l2, member m
	where s.userId=#{userId} and s.userId=m.userId and s.list_id=i.list_id and i.code02=l2.code02 and s.purchase_date >= DATE_ADD(now(), interval -6 month) 
	group by l2.code02_vl, tot.total;
	]]>
	</select>
	<select id="categoryAvg12" resultMap="CategoryAvg">
	<![CDATA[
	select l2.code02_vl, sum(i.price)/tot.total*100 as percentage
	from (select sum(i.price) as total
			from shopping_list s, item i, member m
			where s.userId=#{userId} and s.userId=m.userId and s.list_id=i.list_id and s.purchase_date >= DATE_ADD(now(), interval -12 month))as tot, shopping_list s, item i, level2 l2, member m
	where s.userId=#{userId} and s.userId=m.userId and s.list_id=i.list_id and i.code02=l2.code02 and s.purchase_date >= DATE_ADD(now(), interval -12 month) 
	group by l2.code02_vl, tot.total;
	]]>
	</select>
	
</mapper>